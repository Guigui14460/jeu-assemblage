<?xml version="1.0" encoding="UTF-8" ?>
<project name="jeuAssemblage" default="run" basedir=".">
    <property name="app.name"      value="jeuAssemblage" />
    <property name="app.version"   value="0.1"/>
    <property name="app.fullname"   value="${app.name}-${app.version}"/>
    
    <property name="build.home"    value="${basedir}/build"/>
    <property name="dist.home"     value="${basedir}/dist"/>
    <property name="docs.home"     value="${basedir}/docs"/>
    <property name="src.home"      value="${basedir}/src"/>
    <property name="test.home"      value="${basedir}/src"/>
    <property name="lib.home"      value="${basedir}/lib"/>
    <property name="reports.home"  value="${basedir}/reports" />
    
    <property name="javac.version" value="1.8"/>
    <property name="javac.encoding"      value="UTF-8"/>
  
    <!-- ==================== Compile options =========================== -->
    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="true"/>
           
    <!-- ==================== Compilation Classpath =========================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.home}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ==================== All Target ====================================== -->
    <target name="all" depends="clean,compile" description="Clean build and dist directories, then compile"/>

    <!-- ==================== Clean Target ==================================== -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
        <delete dir="${reports.home}"/>
    </target>

    <!-- ==================== Prepare Target ================================== -->
    <target name="prepare">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${dist.home}"/>
        <mkdir dir="${reports.home}"/>
    </target>

    <!-- ==================== Compile Target ================================== -->
    <target name="compile" depends="prepare" description="Compile Java sources">
        <javac srcdir="${src.home}"
               destdir="${build.home}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               source="${javac.version}" 
               encoding="${javac.encoding}">
            <classpath refid="compile.classpath"/>
        </javac>
        <!-- Copy application resources -->
        <copy todir="${build.home}">
            <fileset dir="${src.home}" excludes="**/*.java"/>
        </copy>
    </target>

    <!-- ==================== Dist Target ===================================== -->
    <target name="dist" depends="clean,javadoc" description="Create binary distribution">
        <copy  todir="${dist.home}/lib">
            <fileset dir="${lib.home}"/>
        </copy>
        <!-- Create application JAR file -->
        <jar jarfile="${dist.home}/${app.fullname}.jar"
             basedir="${build.home}">
             <zipgroupfileset dir="${lib.home}" includes="**/*.jar" />
            <manifest>
                <attribute name="Main-Class" value="Main"/>
                <!-- <attribute name="Class-Path" value="piecesPuzzle-0.1.jar" /> -->
            </manifest>
        </jar>
    </target>
  
    <!-- ==================== Javadoc Target ================================== -->
    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${dist.home}/docs/api"/>
        <javadoc sourcepath="${src.home}"
                 destdir="${dist.home}/docs/api"
                 defaultexcludes="yes"
                 author="true"
                 version="true"
                 packagenames="*">
            <classpath>
                <fileset dir="${lib.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
    </target>

    <!-- ==================== Run Target ================================== -->
    <target name="run" depends="dist">
        <java jar="${dist.home}/${app.fullname}.jar" fork="true" />
    </target>

    <!-- ==================== Test Target ================================== -->
    <target name="test" depends="compile">
        <junit printsummary="yes" haltonfailure="no">
            <classpath refid="compile.classpath"/>
            <classpath>
                <pathelement location="${test.home}"/>
                <pathelement location="${build.home}"/>
            </classpath>

            <formatter type="plain" />
            <batchtest fork="yes" todir="${reports.home}">
                <fileset dir="${test.home}">
                    <include name="**/*Test*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>
</project>
